#!/usr/bin/env python
from time import sleep
from threading import Timer
import random
import rospy
from geometry_msgs.msg import Twist
from opencv_apps.msg import FaceArrayStamped    

class Follower(object):
    def __init__(self):
        self.sub_topic = rospy.get_param('follower/listen', '/eyes_local/face_detection/faces')
        self.pub_topic = rospy.get_param('follower/publish', '/pca9685_board_node/servos_drive')
        self.pub = rospy.Publisher(self.pub_topic, Twist, queue_size=10)
        #  face_size: 48.0 max: 358.0, min: 48.0
        self.face_max = 360
        self.face_min = 35

    def start(self):
        rospy.Subscriber(self.sub_topic, FaceArrayStamped, self.sub_callback)

    # def play_reverie(self):
    #     last_time = 0
    #     revery = self.reveries[random.randint(0, len(self.reveries) - 1)]
    #     with rosbag.Bag(revery) as bag:
    #         for topic, msg, t in bag.read_messages(topics=['/cmd_vel']):
    #             if self.interrupt:
    #                 break
    #             if last_time:
    #                 rospy.sleep(t - last_time)
    #                 last_time = t
    #             else:
    #                 last_time = t
    #             self.pub.publish(msg)

    def sub_callback(self, data):
        if data.faces:
            width = data.faces[0].face.width
            if width < self.face_min:
                self.face_min = width
            if width > self.face_max:
                width = self.face_max
                # self.face_max = width

            z_linear = (data.faces[0].face.width - self.face_min)/(self.face_max/2) - 1.0

            rospy.loginfo("face_size: {} max: {}, min: {}".format(data.faces[0].face.width, self.face_max, self.face_min))
            rospy.loginfo("z_linear: {}".format(z_linear))
            vel_msg = Twist()
            vel_msg.angular.z = 1.0 - (data.faces[0].face.x/640.0)
            vel_msg.angular.y = 1.0 - (data.faces[0].face.y/360.0)
            vel_msg.linear.z = z_linear

            self.pub.publish(vel_msg)
        # data.faces[0].face

if __name__ == "__main__":
        rospy.init_node('eyes_follower_node', anonymous=True)
        # spin() simply keeps python from exiting until this node is stopped
        follower = Follower()
        follower.start()
        rospy.spin()